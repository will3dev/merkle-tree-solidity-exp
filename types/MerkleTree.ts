/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface MerkleTreeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addLeaf"
      | "generateMerkleProof"
      | "getMerkleRoot"
      | "getProofHeight"
      | "leafCount"
      | "leaves"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "addLeaf", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "generateMerkleProof",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMerkleRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProofHeight",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "leafCount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "leaves",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addLeaf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "generateMerkleProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProofHeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "leafCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "leaves", data: BytesLike): Result;
}

export interface MerkleTree extends BaseContract {
  connect(runner?: ContractRunner | null): MerkleTree;
  waitForDeployment(): Promise<this>;

  interface: MerkleTreeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addLeaf: TypedContractMethod<[leaf: BytesLike], [void], "nonpayable">;

  generateMerkleProof: TypedContractMethod<
    [leafPosition: BigNumberish],
    [string[]],
    "view"
  >;

  getMerkleRoot: TypedContractMethod<[], [string], "view">;

  getProofHeight: TypedContractMethod<[], [bigint], "view">;

  leafCount: TypedContractMethod<[], [bigint], "view">;

  leaves: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addLeaf"
  ): TypedContractMethod<[leaf: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "generateMerkleProof"
  ): TypedContractMethod<[leafPosition: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "getMerkleRoot"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getProofHeight"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "leafCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "leaves"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  filters: {};
}
